import telebot
from telebot import types
import requests
import os
from dotenv import load_dotenv
import logging

logging.basicConfig(filename='stats.txt', level=logging.INFO, format='%(asctime)s - %(message)s')

load_dotenv()

bot = telebot.TeleBot(os.getenv('tg_bot_api'))


class WeatherBot:
    def __init__(self):
        self.api_key = os.getenv('open_weather_api')

        self.emoji_dict = {
            'cloud': "–•–º–∞—Ä–Ω–æ ‚òÅÔ∏è",
            'rain': "–î–æ—â üåßÔ∏è", 
            'sun': "–°–æ–Ω—è—á–Ω–æ ‚òÄÔ∏è",
            'snow': "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
            'thunderstorm': "–ì—Ä–æ–∑–∞ ‚õàÔ∏è",
            'few clouds': "–ü–µ—Ä–µ–≤–∞–∂–Ω–æ —Ö–º–∞—Ä–Ω–æ üå§Ô∏è",
            'clear sky': "–Ø—Å–Ω–æ üåû",
            'mist': "–¢—É–º–∞–Ω/–º–≥–ª–∞ üå´Ô∏è",
            'smoke': "–î–∏–º üå´Ô∏è",
            'haze': "–ú–≥–ª–∞/—Ç—É–º–∞–Ω üå´Ô∏è",
            'dust': "–ü–∏–ª/–ø–∏–ª–∏–Ω–∞ üå´Ô∏è",
            'fog': "–¢—É–º–∞–Ω/–º–≥–ª–∞ üå´Ô∏è",
            'sand': "–ü—ñ—â–∞–Ω–∞ –±—É—Ä—è üå´Ô∏è",
            'ash': "–ü–æ–ø—ñ–ª/–≤—É–ª–∫–∞–Ω—ñ—á–Ω–∏–π –ø–æ–ø—ñ–ª üåã",
            'squall': "–®–∫–≤–∞–ª üí®",
            'tornado': "–¢–æ—Ä–Ω–∞–¥–æ üå™Ô∏è"
        }

        self.gif_dict = {
            'cloud': 'cloudy.gif',
            'rain': 'rain.gif',
            'sun': 'sun.gif',
            'snow': 'snow.gif',
            'thunderstorm': 'thunderstorm.gif',
            'few clouds': 'variable cloudiness.gif',
            'clear sky': 'clear sky.gif',
            'mist': 'haze.gif',
            'smoke': 'haze.gif',
            'haze': 'light fog.gif',
            'dust': 'dust.gif',
            'fog': 'mist.gif',
            'sand': 'sandstorm.gif',
            'ash': 'volcanic ash.gif',
            'squall': 'squall.gif',
            'tornado': 'tornado.gif'
        }

    def start(self, message):
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ—î–º—É –º—ñ—Å—Ç—ñ?",
            parse_mode='html'
        )
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
        answer1 = types.KeyboardButton('–¢–∞–∫')
        answer2 = types.KeyboardButton('–ù—ñ')
        markup.add(answer1, answer2)
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:', reply_markup=markup)

    def handle_message(self, message):
        if message.chat.type == "private":
            if message.text == "–¢–∞–∫":
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –Ω–∏–∂—á–µ')
            elif message.text == "–ù—ñ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
                exit_button = types.KeyboardButton('–í–∏–π—Ç–∏')
                markup.add(exit_button)
                bot.send_message(message.chat.id, "–ù—É –≥–∞—Ä–∞–∑–¥ üòî\n–°–ø–∏—à–µ–º–æ—Å—å –ø—ñ–∑–Ω—ñ—à–µ!", reply_markup=markup)
            elif message.text == "–í–∏–π—Ç–∏":
                bot.send_message(message.chat.id, "–í–∏ –≤–∏–π—à–ª–∏ –∑ –º–µ–Ω—é.", reply_markup=None)
            else:
                self.check_weather(message)

    def check_weather(self, message):
        if message.chat.type == "private":
            if message.text == "":
                bot.send_message(message.chat.id, "–¢–∏ –Ω–µ –≤–≤—ñ–≤ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.")
                return

            self.log_city(message.from_user.id, message.text)

            url = f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&units=metric&appid={self.api_key}"
            response = requests.get(url)
            data = response.json()

            if 'weather' in data:
                weather_description = data['weather'][0]['description']
                temperature = int(data['main']['temp'])
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']

                emoji = self.get_emoji(weather_description)
                gif_filename = self.get_gif_filename(weather_description)

                if gif_filename:
                    with open(gif_filename, 'rb') as gif_file:
                        bot.send_animation(message.chat.id, gif_file)

                response_message = f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {message.text}:\n\n" \
                                   f"–ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏: {emoji}\n" \
                                   f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞—Ä–∞–∑—ñ —Å–∫–ª–∞–¥–∞—î: {temperature}¬∞C\n" \
                                   f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n" \
                                   f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –º/—Å"
                bot.send_message(message.chat.id, response_message)
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î.")

    def get_emoji(self, description):
        description = description.lower()
        for key, value in self.emoji_dict.items():
            if key in description:
                return value
        return ""

    def get_gif_filename(self, description):
        description = description.lower()
        for key, value in self.gif_dict.items():
            if key in description:
                return os.path.join('weather_gif', value)
        return None

    def log_city(self, user_id, city):
        logging.info(f"User {user_id} picked: {city}")


weather_bot = WeatherBot()


@bot.message_handler(commands=['start'])
def start(message):
    weather_bot.start(message)


@bot.message_handler(content_types=['text'])
def handle_message(message):
    weather_bot.handle_message(message)


bot.polling()
